node("Linux") {
    stage("Checkout the sources") {
        checkout scm
    }
    stage("Test") {
        docker.image("gradle:6.7.0").inside() {
            sh(script: "apt-get update && apt-get install -y python3 python3-pip")
            stage("Python tests") {
                sh(script: "cd resources/org/jfrog/conanci && python3 -m unittest python_runner/tests/runner_test.py")
            }
            stage("Groovy tests") {
                sh(script: "./gradlew assemble && ./gradlew test")
            }
        }
    }
    stage("Check if conantests image has to be built") {
        def linter = env.LINT_CONANTESTS ? true : false
        def target_branch = env.BRANCH_NAME.startsWith('PR') ? "${env.CHANGE_TARGET}" : "${env.BRANCH_NAME}"
        def current_commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
        sh(script: "git checkout ${target_branch}")
        def previous_commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
        def count = sh(script: "git diff --name-only ${previous_commit}..${current_commit} | sort -u | uniq | grep docker_images | wc -l", returnStdout: true).trim() as int
        if (count>0) {
            sh(script: "git checkout ${current_commit}")
            List<String> images = ["ci-unittests", "ci-functional", "conantests"]
            for (def image_name in images) {
                echo "Building docker image 'conanio/${image_name}'"
                if (linter) {
                    stage("Linting the image") {
                        sh(script: "docker run --rm -i hadolint/hadolint < docker_images/$image_name/Dockerfile")
                    }
                }
                stage("Building 'conanio/${image_name}'") {
                    sh(script: "docker build -t conanio/${image_name} docker_images/${image_name}")
                    sh(script: "docker images")
                }
                if (env.BRANCH_NAME=="master") {
                    stage("Push 'conanio/${image_name}'") {
                        // withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        //     sh(script: "echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin;")
                        //     sh(script: "docker push conanio/${image_name}")
                        // }
                    }
                }
            }
        }
    }
}
