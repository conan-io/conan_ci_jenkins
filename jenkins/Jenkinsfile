def buildDockerClosure(String image_name, boolean linter) {
    return {
        echo "Building docker image 'conanio/${image_name}'"
        if (linter) {
            stage("Linting the image") {
                sh(script: "docker run --rm -i hadolint/hadolint < docker_images/${image_name}/Dockerfile")
            }
        }
        stage("Building 'conanio/${image_name}'") {
            sh(script: "docker build -t conanio/${image_name} docker_images/${image_name}")
        }
        if (env.BRANCH_NAME=="master") {
            stage("Push 'conanio/${image_name}'") {
                withCredentials([usernamePassword(credentialsId: 'conan_ci_jenkins_docker', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh(script: "echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin;")
                    sh(script: "docker push conanio/${image_name}")
                }
            }
        }
    }
}

node("dockerbuilder") {
    stage("Checkout the sources") {
        checkout scm
    }
    stage("Check if docker images have to be built") {
        def linter = env.LINT_CONANTESTS ? true : false
        def current_branch = env.BRANCH_NAME
        def target_branch = current_branch.startsWith('PR') ? "${env.CHANGE_TARGET}" : "${env.BRANCH_NAME}"
        def current_commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
        def previous_commit = null
        if (current_branch!="master") {
            sh(script: "git checkout ${target_branch}")
            previous_commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
            sh(script: "git checkout ${current_commit}")
        }
        else {
            previous_commit = sh(script: "git rev-parse HEAD^1", returnStdout: true).trim()
        }        
        
        List<String> images = ["conan-training", "ci-unittests", "ci-functional", "ci-conantests", "ci-release", "ci-docs", "conantests"]
        def parallelDockerBuilds = [:]
        for (def image_name in images) {
            def count = sh(script: "git diff --name-only ${previous_commit}..${current_commit} | sort -u | uniq | grep docker_images/${image_name} | wc -l", returnStdout: true).trim() as int
            if (count>0) {
                parallelDockerBuilds["Build 'conanio/${image_name}'"] = buildDockerClosure(image_name, linter)
            }
        }
        parallel(parallelDockerBuilds)
    }
}
