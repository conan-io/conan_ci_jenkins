node("Linux") {
    stage("Checkout the sources") {
        checkout scm
    }
    stage("Test") {
        docker.image("gradle:6.7.0").inside() {
            sh(script: "apt-get update && apt-get install -y python3 python3-pip")
            stage("Python tests") {
                sh(script: "cd resources/org/jfrog/conanci && python3 -m unittest python_runner/tests/runner_test.py")
            }
            stage("Groovy tests") {
                sh(script: "./gradlew assemble && ./gradlew test")
            }
        }
    }
    stage("Check if docker images have to be built") {
        def linter = env.LINT_CONANTESTS ? true : false
        String pr_head_commit = null
        String master_head = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
        String p = sh(script: "git log --pretty=%P -n 1 --date-order", returnStdout: true).trim()
        List<String> parent_commits = p.split(" ")
        String master_commit = parent_commits[0]
        if (parent_commits.size() == 2) {
            // It was a merge-commit, there is another ancestor!
            pr_head_commit = parent_commits[1]
        }
        String prevCommit = pr_head_commit ? pr_head_commit : master_commit
        List<String> images = ["ci-unittests", "ci-functional", "ci-conantests"]
        for (def image_name in images) {
            def count = sh(script: "git diff --name-only ${prev_commit}..${master_head} | sort -u | uniq | grep docker_images/${image_name} | wc -l", returnStdout: true).trim() as int
            if (count>0) {
                echo "Building docker image 'conanio/${image_name}'"
                if (linter) {
                    stage("Linting the image") {
                        sh(script: "docker run --rm -i hadolint/hadolint < docker_images/${image_name}/Dockerfile")
                    }
                }
                stage("Building 'conanio/${image_name}'") {
                    sh(script: "docker build -t conanio/${image_name} docker_images/${image_name}")
                    sh(script: "docker images")
                }
                if (env.BRANCH_NAME=="master") {
                    stage("Push 'conanio/${image_name}'") {
                        withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh(script: "echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin;")
                            sh(script: "docker push conanio/${image_name}")
                        }
                    }
                }
            }
        }
    }
}
